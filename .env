REACT_APP_VIDEOSDK_TOKEN = "1ca63b0d-3776-4609-97e4-b18fb44c3efb"
publick key=rwthovpp
private key=8e13832f-f7d4-4f85-9053-bca851dfa2b0
mongodb+srv://gcgondwe531:<password>@cluster0.gxdxh1m.mongodb.net/
mongodb+srv://gcgondwe531:<password>@cluster0.gxdxh1m.mongodb.net/

pwd=hgg%27piuharfhkyfwtmlj

cruster URL mongodb://atlas-sql-661f90399effd84900227796-pkr27.a.query.mongodb.net/flexdb?ssl=true&authSource=admin
mongodb+srv://gcgondwe531:<password>@cluster0.gxdxh1m.mongodb.net/

mongodb+srv://gcgondwe531:<password>@cluster0.gxdxh1m.mongodb.net/
mongodb+srv://gcgondwe531:<password>@cluster0.gxdxh1m.mongodb.net/


const { MongoClient } = require("mongodb");
const { typeDefs } = require("./schema/typeDefs");
const { resolvers } = require("./schema/resolvers");
const { ApolloServer } = require("apollo-server");

// Replace the following with your actual MongoDB Atlas connection string
const uri = "mongodb+srv://<username>:<password>@<cluster-url>/<dbname>?retryWrites=true&w=majority";

// Create a new MongoClient
const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });

async function startServer() {
  try {
    // Connect to MongoDB
    await client.connect();
    console.log("Connected to MongoDB!");

    // Apollo Server setup
    const server = new ApolloServer({
      typeDefs,
      resolvers,
      context: () => ({ db: client.db("sample_mflix") }) // Pass the database connection to the resolvers
    });

    // Start Apollo Server
    const { url } = await server.listen();
    console.log(`YOUR API IS RUNNING AT: ${url}`);
  } catch (err) {
    console.error('Error starting the server:', err);
  }
}

startServer();
